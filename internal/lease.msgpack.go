package internal

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"time"

	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Lease) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "key":
			z.ID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "ttl":
			var v int64
			v, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "TTL")
				return
			}
			z.TTL = time.Duration(v * int64(time.Millisecond))
		case "expire_at":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ExpireAt")
					return
				}
				z.ExpireAt = nil
			} else {
				if z.ExpireAt == nil {
					z.ExpireAt = new(Timestamp)
				}
				err = z.ExpireAt.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "ExpireAt")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Lease) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "key"
	err = en.Append(0x83, 0xa3, 0x6b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "Key")
		return
	}
	// write "ttl"
	err = en.Append(0xa3, 0x74, 0x74, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteInt64(int64(z.TTL / time.Millisecond))
	if err != nil {
		err = msgp.WrapError(err, "TTL")
		return
	}
	// write "expire_at"
	err = en.Append(0xa9, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x74)
	if err != nil {
		return
	}
	if z.ExpireAt == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.ExpireAt.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "ExpireAt")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Lease) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "key"
	o = append(o, 0x83, 0xa3, 0x6b, 0x65, 0x79)
	o = msgp.AppendString(o, z.ID)
	// string "ttl"
	o = append(o, 0xa3, 0x74, 0x74, 0x6c)
	o = msgp.AppendInt64(o, int64(z.TTL/time.Millisecond))
	// string "expire_at"
	o = append(o, 0xa9, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x74)
	if z.ExpireAt == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.ExpireAt.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "ExpireAt")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Lease) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "key":
			z.ID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "ttl":
			var v int64
			v, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TTL")
				return
			}
			z.TTL = time.Duration(v * int64(time.Millisecond))
		case "expire_at":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ExpireAt = nil
			} else {
				if z.ExpireAt == nil {
					z.ExpireAt = new(Timestamp)
				}
				bts, err = z.ExpireAt.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ExpireAt")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Lease) Msgsize() (s int) {
	s = 1 + 4 + msgp.StringPrefixSize + len(z.ID) + 4 + msgp.Int64Size + 10
	if z.ExpireAt == nil {
		s += msgp.NilSize
	} else {
		s += z.ExpireAt.Msgsize()
	}
	return
}
